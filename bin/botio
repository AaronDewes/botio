#!/usr/bin/env node
const program = require('commander'),
    shell = require('shelljs');

if (process.argv.length < 3)
  process.argv.push('--help')

program
  .version(JSON.parse(shell.cat(__dirname+'/../package.json')).version);

program
  .command('bootstrap')
  .description('set up necessary Github hooks, create basic config files in current dir')
  .option('-r, --repo <repo>', 'Github repo to watch, e.g. mozilla/pdf.js')
  .option('-t, --token <token>', 'GitHub access token')
  .option('-f, --force', 'do not prompt before overwriting files')
  .action(function(opts){
    global.repo = opts.repo;
    global.token = opts.token;
    global.force = opts.force;
    require(__dirname+'/../lib/bootstrap.js');
  });

program
  .command('sethooks')
  .description('set up necessary Github hooks, create basic config files in current dir')
  .option('-t, --token <token>', 'GitHub access token')
  .action(function(opts){
    global.token = opts.token;
    require(__dirname+'/../lib/sethooks.js');
  });

program
  .command('start')
  .description('start the Bot.io server')
  .option('-t, --token <token>', 'GitHub access token')
  .option('-s, --secret <secret>', 'Github webhook secret')
  .option('-d, --debug', 'enable debug output')
  .action(function(opts){
    global.token = opts.token;
    global.secret = opts.secret;
    global.debug = opts.debug;
    require(__dirname+'/../lib/server.js');
  });

// not a valid command
program
  .command('*')
  .action(function(){
    console.log('Invalid command. Try --help for usage.')
  });

program.parse(process.argv);

// handle signals
process.on( "SIGINT", function() {
  console.log('CLOSING [SIGINT]');
  process.exit();
} );
process.on( "SIGTERM", function() {
  console.log('CLOSING [SIGTERM]');
  process.exit();
} );

